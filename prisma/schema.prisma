generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Board {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String   @db.String
  userId     String   @db.ObjectId
  columns    Column[] @relation("BoardColumn")
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Column {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String   @db.String
  board_uuid String   @db.String
  position   Int
  color      String   @db.String
  userId     String   @db.ObjectId
  board      Board    @relation("BoardColumn", fields: [board_uuid], references: [uuid], onDelete: Cascade)
  tasks      Task[]   @relation("ColumnTask")

  @@index([board_uuid])
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        String   @db.String
  description String?  @db.String
  position    Int
  column_uuid String   @db.String
  userId      String   @db.ObjectId
  column      Column   @relation("ColumnTask", fields: [column_uuid], references: [uuid], onDelete: Cascade)
  subtasks    Subtask[] @relation("TaskSubtask")

  @@index([column_uuid])
}

model Subtask {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String   @db.String
  task_uuid  String   @db.String
  completed  Boolean  @default(false)
  userId     String   @db.ObjectId
  task       Task     @relation("TaskSubtask", fields: [task_uuid], references: [uuid], onDelete: Cascade)

  @@index([task_uuid])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String  @db.String
  provider          String  @db.String
  providerAccountId String  @db.String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String? @db.String
  scope             String? @db.String
  id_token          String? @db.String
  session_state     String? @db.String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @db.String
  email         String?   @unique @db.String
  emailVerified DateTime?
  image         String?   @db.String
  accounts      Account[]
  sessions      Session[]
  Board         Board[]
}

model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String @db.String
  token      String @unique @db.String
  expires    DateTime

  @@unique([identifier, token])
}
